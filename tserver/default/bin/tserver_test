#! /bin/sh
##
## tserver_test --
##
##   Test script for tserver executed in xcluster.
##
## Commands;
##

prg=$(basename $0)
dir=$(dirname $0); dir=$(readlink -f $dir)
me=$dir/$prg
tmp=/tmp/${prg}_$$

. /etc/profile
test -n "$DOMAIN" || DOMAIN=xcluster
test -n "$PREFIX" || PREFIX=fd00:
yamld=/etc/kubernetes/tserver

die() {
	echo "ERROR: $*" >&2
	rm -rf $tmp
	exit 1
}
help() {
	grep '^##' $0 | cut -c3-
	rm -rf $tmp
	exit 0
}
test -n "$1" || help
echo "$1" | grep -qi "^help\|-h" && help

log() {
	echo "$prg: $*" >&2
}
dbg() {
	test -n "$__verbose" && echo "$prg: $*" >&2
}

cmd_tcase_check_namespaces() {
	test_namespaces
}
cmd_tcase_check_nodes() {
	test_nodes
}
cmd_tcase_vip_routes() {
	tcase "Set VIP routes (ECMP)"
	vip_route
}
cmd_tcase_version() {
	log_version
}
##   tcase_vip_route <target-ipv4>
##     Set the VIP route to the specified target
cmd_tcase_vip_route() {
	tcase "Set the VIP route to $1"
	test -n "$1" || die "Parameter missing"
	ip ro replace 10.0.0.0/24 via $1 || tdie ipv4
	ip -6 ro replace $PREFIX:10.0.0.0/120 via $PREFIX:$1 || tdie ipv6
}

##   tcase_deployment
##     Start a deployment
cmd_tcase_deployment() {
	tcase "Start deployment [$1]"
	test -n "$1" || tdie "No deployment"
	local deployment=$1
	local f=$yamld/$deployment.yaml
	test -r $f || tdie "Not readable [$f]"
	if test -n "$__replicas"; then
		tlog "Setting replicas=$__replicas"
		sed -i -E "s,replicas: [0-9]+,replicas: $__replicas," $f
	fi
	if test -n "$__nodes"; then
		# Use a nodeSelector
		tlog "Starting on nodes [$__nodes]"
		sed -i -e "s,#example.com,example.com," $f
		local n vms
		for n in $(echo $__nodes | tr , ' '); do
			vms="$(printf "vm-%03d" $n) $vms"
		done
		kubectl label nodes $vms example.com/server=tserver || \
			die "Failed to label nodes [$vms]"
	fi
	$kubectl create -f $f || tdie "kubectl create"
	test_deployment $deployment 180
}
##   tcase_start_daemonset
##     Start a DaemonSet
cmd_tcase_start_daemonset() {
	local daemonset=tserver-daemonset
	test -n "$1" && daemonset=$1
	tcase "Start deployment $daemonset"
	kubectl create -f $yamld/$daemonset.yaml
	test_daemonset $daemonset 180
}
##   tcase_create_svc
##     Create services and assign lb-ip's
cmd_tcase_create_svc() {
	tcase "Create services and assign lb-ip's"
	$kubectl create -f $yamld/tserver-svc.yaml
	assign-lb-ip -svc tserver -ip 10.0.0.52,$PREFIX:10.0.0.52
	assign-lb-ip -svc tserver-udp -ip 10.0.0.52,$PREFIX:10.0.0.52
	assign-lb-ip -svc tserver-sctp -ip 10.0.0.52,$PREFIX:10.0.0.52
}
##   tcase_svc <name> [vip]
##     Create a service and assign lb-ip
cmd_tcase_svc() {
	tcase "Create service [$1] ($2)"
	test -n "$1" || tdie "Parameters missing"
	local name=$1 vip=$2
	local f=$yamld/$name.yaml
	test -r $f || f=$yamld/svc-$name.yaml
	test -r $f || tdie "Svc not found: $name"
	kubectl create -f $f || die "kubectl create"
	if test -n "$vip"; then
		assign-lb-ip -svc $name -ip $vip,$PREFIX:$vip || tdie assign-lb-ip
	fi
	return 0
}
##   tcase_traffic [VIP]
##     Test connectivity with mconnect
cmd_tcase_traffic() {
	local vip=10.0.0.52
	test -n "$1" && vip=$1
	tcase "Test connectivity with mconnect"
	test_mconnect $vip:5001
	echo $vip | grep -Eq '[a-z]+' && return 0  # Symbolic address
	test_mconnect [$PREFIX:$vip]:5001
}
test_mconnect() {
	pushv 30 6 5
	if test -n "$__replicas"; then
		tlog "Traffic to; $1, targets=$__replicas"
		local nconn=$((__replicas * 25))
		tex do_mconnect $1 $nconn $__replicas 80 || tdie "mconnect to; $1"
	else
		tlog "Traffic to; $1"
		tex do_mconnect $1 || tdie "mconnect to; $1"
	fi
}
##   tcase_deny_external_traffic <vip>
##     Test that traffic to the vip is denied
cmd_tcase_deny_external_traffic() {
	local vip=$1
	tcase "Test that traffic to $vip is denied"
	test -n "$vip" || tdie "No VIP address"
	mkdir -p $tmp
	local out=$tmp/out failed
	mconnect -address $vip:5001 -nconn 20 -output json > $out
	failed=$(jq -r .failed_connects < $out)
	if test "$failed" != "20"; then
		cat $out
		tdie "Ipv4: got [$failed] failed connects, expected 20"
	fi
	mconnect -address $PREFIX:$vip:5001 -nconn 20 -output json > $out
	failed=$(jq -r .failed_connects < $out)
	if test "$failed" != "20"; then
		cat $out
		tdie "Ipv4: got [$failed] failed connects, expected 20"
	fi
}
##   tcase_conntrack_size [size]
##     Set the conntrack table size. Default 20000
cmd_tcase_conntrack_size() {
	local s=20000
	test -n "$1" && s=$1
	tcase "Set conntrack size to $s"
	echo $s > /proc/sys/net/nf_conntrack_max
}
##   tcase_antrea_setup
##     Setup a mconnect server and an IPv6 service for distribution test
cmd_tcase_antrea_setup() {
	tcase "Setup server and IPv6 service for distribution test"
	kubectl create -f $yamld/antrea-test.yaml || tdie
	assign-lb-ip -svc tserver-mconnect -ip $PREFIX:10.0.0.40
	test_deployment tserver-mconnect 180
}
##   tcase_traffic_from_pod <selector> <svc|ip>
##     Test mconnect from a POD to a service
cmd_tcase_traffic_from_pod() {
	tcase "Test mconnect from a POD to a service [$2]"
	test -n "$2" || tdie "Parameter missing"
	local pod=$(kubectl get pods -l $1 -o name | head -1)
	tlog "$pod"
	mkdir -p $tmp
	local out=$tmp/out
	pushv 60
	tex "mconnect_from_pod $pod $2 /dev/null" || tdie "FAILED mconnect"
	# Here the service can be parially setup which may lead to a false
	# error. If this is in a bisect search we *absolutely not* want
	# false errors. So, delay and make a final connect
	sleep 2
	mconnect_from_pod $pod $2 $out || tdie "FAILED final mconnect"
	if ! check_mconnect_result $out 100 4 100; then
		cat $out | jq >&2
		tlog "FAILED Distribution"
	fi
	# Only fail if we have only one target
	local targets=$(cat $out | jq '.hosts|flatten|length')
	test "$targets" -gt 1 || tdie "Targets [$targets]"
	return 0
}
mconnect_from_pod() {
	kubectl exec $1 -- mconnect -address $2:5001 -nconn 100 -output json > $3
}
##   tcase_start_servers
##     Start the servers in main netn
cmd_tcase_start_servers() {
	tcase "Start the servers in main netn"
	test -n "$SERVERS" || SERVERS="ctraffic,mconnect,sctp,udpserver"
	export SERVERS
	export SCTP_INTERFACE=eth1
	nohup start-servers > /var/log/server.log 2>&1 &
	return 0
}
##   tcase_offload [interface]
##     Turn off NIC offload
cmd_tcase_offload() {
	local iface=eth1
	test -n "$1" && iface=$1
	tcase "Turn off NIC offload for [$iface]"
	ethtool -K $iface gro off gso off tso off
}

. /usr/lib/xctest
indent='  '

##
# Get the command
cmd=$1
shift
grep -q "^cmd_$cmd()" $0 || die "Invalid command [$cmd]"

while echo "$1" | grep -q '^--'; do
	if echo $1 | grep -q =; then
		o=$(echo "$1" | cut -d= -f1 | sed -e 's,-,_,g')
		v=$(echo "$1" | cut -d= -f2-)
		eval "$o=\"$v\""
	else
		o=$(echo "$1" | sed -e 's,-,_,g')
		eval "$o=yes"
	fi
	shift
done
unset o v
long_opts=`set | grep '^__' | cut -d= -f1`

# Execute command
trap "die Interrupted" INT TERM
cmd_$cmd "$@"
status=$?
rm -rf $tmp
exit $status
