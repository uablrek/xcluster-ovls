#! /bin/sh
##
## k8s-load-balancing_test --
##
##   Test script for k8s-load-balancing executed in xcluster.
##
## Commands;
##

prg=$(basename $0)
dir=$(dirname $0); dir=$(readlink -f $dir)
me=$dir/$prg
tmp=/tmp/${prg}_$$

. /etc/profile
test -n "$DOMAIN" || DOMAIN=xcluster
test -n "$PREFIX" || PREFIX=1000::1
yamld=/etc/kubernetes/k8s-load-balancing

die() {
	echo "ERROR: $*" >&2
	rm -rf $tmp
	exit 1
}
help() {
	grep '^##' $0 | cut -c3-
	rm -rf $tmp
	exit 0
}
test -n "$1" || help
echo "$1" | grep -qi "^help\|-h" && help

log() {
	echo "$prg: $*" >&2
}
dbg() {
	test -n "$__verbose" && echo "$prg: $*" >&2
}

cmd_tcase_check_namespaces() {
	test_namespaces
}
cmd_tcase_check_nodes() {
	test_nodes
}
cmd_tcase_vip_routes() {
	if test -z "$1"; then
		tcase "Set VIP routes (ECMP)"
		vip_route
	else
		tcase "Set VIP route to [$1]"
		ip route replace 10.0.0.0/24 via $1 || tdie ipv4
		ip route replace $PREFIX:10.0.0.0/120 via $PREFIX:$1 || tdie ipv6		
	fi
}
##   tcase_conntrack_size [size]
##     Set the conntrack table size. Default 20000
cmd_tcase_conntrack_size() {
	local s=20000
	test -n "$1" && s=$1
	tcase "Set conntrack size to $s"
	echo $s > /proc/sys/net/nf_conntrack_max
}
##   tcase_add_address_range
##     Add address ranges to "lo"
cmd_tcase_add_address_range() {
	tcase 'Add address ranges to "lo"'
	ip addr add 20.0.0.0/16 dev lo || tdie IPv4
	ip -6 addr add $PREFIX:20.0.0.0/112 dev lo || tdie IPv6
	ip -6 ro add local $PREFIX:20.0.0.0/112 dev lo || tdie IPv6
	sysctl -w net.ipv4.ip_nonlocal_bind=1
	sysctl -w net.ipv6.ip_nonlocal_bind=1
}
##   tcase_client_routes
##     Add routes to the client address ranges
cmd_tcase_client_routes() {
	tcase "Add routes to the client address ranges"
	ip ro add 20.0.0.0/16 via 192.168.1.201 || tdie IPv4
	ip -6 ro add $PREFIX:20.0.0.0/112 via $PREFIX:192.168.1.201 || tdie IPv6
}
##   tcase_create_1svc <name> [vip]
##     Create one service and assign lb-ip
cmd_tcase_create_1svc() {
	tcase "Create service $1 with vip [$2]"
	test -n "$1" || tdie "Parameters missing"
	local name=$1 vip=$2
	local f=$yamld/svc-$name.yaml
	test -r $f || tdie "Svc not found: $name"
	kubectl create -f $f || die "kubectl create"
	if test -n "$vip"; then
		assign-lb-ip -svc $name -ip $vip,$PREFIX:$vip || tdie assign-lb-ip
	fi
	return 0
}
##   tcase_start_server
##     Start a deployment
cmd_tcase_start_server() {
	local deployment=tserver
	test -n "$1" && deployment=$1
	tcase "Start deployment $deployment"
	test -n "$__replicas" &&
		sed -i -e "s,replicas: 4,replicas: $__replicas," $yamld/$deployment.yaml
	kubectl create -f $yamld/$deployment.yaml
	test_deployment $deployment 180
}
##   tcase_external_access [--nconn=10000] [--ipv6]
##     Access from an external machine with source ranges
cmd_tcase_external_access() {
	tcase "Access from an external machine with source ranges"
	local adr="10.0.0.1:5001"
	local src="20.0.0.0/16"
	out=/tmp/mconnect
	if test "$__ipv6" = "yes"; then
		adr="[$PREFIX:10.0.0.1]:5001"
		src="$PREFIX:20.0.0.0/112"
	fi
	test -n "$__nconn" || __nconn=10000
	mconnect -address $adr -nconn=$__nconn -output json -srccidr $src > $out \
		|| tdie mconnect
}

. /usr/lib/xctest
indent='  '


# Get the command
cmd=$1
shift
grep -q "^cmd_$cmd()" $0 || die "Invalid command [$cmd]"

while echo "$1" | grep -q '^--'; do
	if echo $1 | grep -q =; then
		o=$(echo "$1" | cut -d= -f1 | sed -e 's,-,_,g')
		v=$(echo "$1" | cut -d= -f2-)
		eval "$o=\"$v\""
	else
		o=$(echo "$1" | sed -e 's,-,_,g')
		eval "$o=yes"
	fi
	shift
done
unset o v
long_opts=`set | grep '^__' | cut -d= -f1`

# Execute command
trap "die Interrupted" INT TERM
cmd_$cmd "$@"
status=$?
rm -rf $tmp
exit $status
