#! /bin/sh
##
## k8s-test_test --
##
##   Test script for k8s-test executed in xcluster.
##
## Commands;
##

prg=$(basename $0)
dir=$(dirname $0); dir=$(readlink -f $dir)
me=$dir/$prg
tmp=/tmp/${prg}_$$
test -n "$DOMAIN" || DOMAIN=xcluster
yamld=/etc/kubernetes/k8s-test


die() {
	echo "ERROR: $*" >&2
	rm -rf $tmp
	exit 1
}
help() {
	grep '^##' $0 | cut -c3-
	rm -rf $tmp
	exit 0
}
test -n "$1" || help
echo "$1" | grep -qi "^help\|-h" && help

log() {
	echo "$prg: $*" >&2
}
dbg() {
	test -n "$__verbose" && echo "$prg: $*" >&2
}

cmd_tcase_check_namespaces() {
	test_namespaces $1
}
cmd_tcase_check_nodes() {
	test_nodes
}
##   tcase_vip_routes [via]
##     Set VIP routes. Use ECMP if "via" is unspecified
cmd_tcase_vip_routes() {
	if test -n "$1"; then
		tcase "Set VIP route via $1"
        ip ro replace 10.0.0.0/24 via $1 || tdie Ipv4
        ip -6 ro replace $PREFIX:10.0.0.0/120 via $PREFIX:$1 || tdie Ipv6
	else
		tcase "Set VIP route via ECMP"
		if test "$TOPOLOGY" = "backend"; then
			tlog "Using TOPOLOGY=backend"
			vip_route 3
			sed -i -e 's,192.168.1.1,192.168.3.1,' $KUBECONFIG
		else
			vip_route
		fi
	fi
}
##   tcase_wait
##     Wait for serviceaccount "default" to appear
cmd_tcase_wait() {
	tcase 'Wait for serviceaccount "default" to appear'
	pushv 60 60 1
	tex kubectl get serviceaccount default 2>&1
}
##   tcase_mconnect [--pod=selector] [--udp] <address> [nconn] [targets] [margin]
##     Connectivity test with mconnect
cmd_tcase_mconnect() {
	test "$__udp" = "yes" && mcopts=-udp
	tcase "Mconnect to $1 $__pod $mcopts"
	test -n "$1" || tdie "No dest"
	adr=$1  # (used in mconnect_from_pod())
	shift
	# Add brackets to ipv6 addresses if needed
	if echo $adr | grep -q :; then
		echo $adr | grep -qF '[' || adr="[$adr]"
	fi
	pushv 60 10 2
	if test -z "$__pod"; then
		tex "do_mconnect $adr $@"
		return
	fi

	pod=$(get_pod $__pod)  # (used in mconnect_from_pod())
	tlog "From POD $pod"
	echo "$pod" | grep -q null && tdie "Pod not found"
	tex "mconnect_from_pod $@"
}
mconnect_from_pod() {
	mkdir -p $tmp
	local out=$tmp/out
	local nconn=100
	if test -n "$1"; then
		nconn=$1
		shift
	fi
	if echo $adr | grep -qF ']' ; then
		echo $adr | grep -qF ']:' || adr=$adr:5001
	else
		echo $adr | grep -qF ':' || adr=$adr:5001
	fi
	if ! $kubectl exec $pod -- \
		mconnect -address $adr -nconn $nconn -output json $mcopts > $out; then
		cat $out | jq .
		return 1
	fi
	check_mconnect_result $out $nconn $@
}
##   tcase_podip
##     Check that the "podIP" is of the main family
cmd_tcase_podip() {
	tcase "Check podIP"
	local main_family=IPv4
	ipv6base && main_family=IPv6
	local podIP=$(kubectl get pod -l app=tserver -o json | jq -r .items[0].status.podIP)
	tlog "podIP; $podIP"
	test "$(family $podIP)" = "$main_family" || tdie "podIP not of main family"
}
family() {
	if echo $1 | grep -q :; then
		echo IPv6
	else
		echo IPv4
	fi
}
##   nslookup <DN>
##     Lookup a domain name
cmd_tcase_nslookup() {
	tcase "nslookup $1"
	test -n "$1" || tdie "No DN"
	nslookup $1 2>&1 | grep -qE "Name:.+$1"
}
##   tcase_headless_services
##     Check addresses of headless services
cmd_tcase_headless_services() {
	local main_family=IPv4
	ipv6base && main_family=IPv6
	tcase "Check addresses of headless services"
	local result=OK
	check_headless headless dual || result=headless
	check_headless headless-ipv4 IPv4 || result=headless-ipv4
	check_headless headless-ipv6 IPv6 || result=headless-ipv6

	check_headless headless-hostnet dual || result=headless-hostnet
	check_headless headless-hostnet-ipv4 IPv4 || result=headless-hostnet-ipv4
	check_headless headless-hostnet-ipv6 IPv6 || result=headless-hostnet-ipv6

	test "$result" = "OK" || tdie $result
}
check_headless() {
	local nipv4=0 nipv6=0 a
	for a in $(endpointslice_addresses $1); do
		if echo $a | grep -q : ; then
			nipv6=$((nipv6 + 1))
		else
			nipv4=$((nipv4 + 1))
		fi
	done
	tlog "Headless service $1. Adr ipv4=$nipv4, ipv6=$nipv6"
	case $2 in
		IPv4) test $nipv4 -gt 0 -a $nipv6 -eq 0;;
		IPv6) test $nipv4 -eq 0 -a $nipv6 -gt 0;;
		dual) test $nipv4 -gt 0 -a $nipv6 -gt 0;;
	esac
}
##   tcase_outgoing_http
##     Test http from a POD to vm-201
cmd_tcase_outgoing_http() {
	local pod=$(get_pod app=tserver)
	tcase "Http from pod [$pod] to vm-201"
	test -n "$pod" || tdie "Can't find POD"
	kubectl exec $pod -- curl -s http://[$PREFIX:192.168.1.201]/cgi-bin/info \
		| grep -q vm-201 || tdie IPv6
	kubectl exec $pod -- curl -s http://192.168.1.201/cgi-bin/info \
		| grep -q vm-201 || tdie IPv4
}
##   tcase_sctp [--pod=selector] <adr>
##     Test SCTP (port 6000). Both IPv4 and IPv6 is tested
cmd_tcase_sctp() {
	tcase "SCTP to [$1] $__pod"
	test -n "$1" || tdie "Parameter missing"
	if test -n "$__pod"; then
		pod=$(get_pod $__pod)  # global
		test -n "$pod" || tdie "Can't find POD"
		tlog "From POD $pod"
		tex sctp_test_pod $1 || tdie "POD to $1"
		return 0
	fi
	tex sctp_test $1 || tdie IPv4
	tex sctp_test $PREFIX:$1 || tdie IPv6
}
sctp_test() {
	echo | ncat --sctp -v -w2 $1 6000 2>&1 | grep -F 'Connected to'
}
sctp_test_pod() {
	echo | $kubectl exec -it $pod -- \
		ncat --sctp -v -w2 $1 6000 2>&1 | grep -F 'Connected to'
}

# Prints all endpointslice addresses for a service
endpointslice_addresses() {
	$kubectl get endpointslices -l kubernetes.io/service-name=$1 -o json \
		| jq -r '.items[].endpoints[].addresses[0]'
}
k8s_unpack() {
	local f=/root/newk8s.tar
	test -r $f || tdie "Not readable [$f]"
	tar -C / -xf $f || tdie "Untar [$f]"
}
cmd_tcase_upgrade_master() {
	tcase "Upgrade master"
	k8s_unpack
	killall kube-apiserver kube-controller-manager kube-scheduler kubelet kube-proxy
}
cmd_tcase_upgrade_worker() {
	tcase "Upgrade worker"
	k8s_unpack
	killall kubelet kube-proxy
}

cmd_tcase_ctraffic_start() {
	tcase "Start traffic in background [$@]"
	tlog "Ctraffic version [$(ctraffic -version)]"
	test -n "$__out" || __out=/tmp/ctraffic.out
	ctraffic $@ -stats all > $__out 2> /dev/null &
}
cmd_tcase_ctraffic_wait() {
	test -n "$__timeout" || __timeout=60
	pushv $__timeout
	tcase "Wait for all ctraffic processes to stop ($__timeout)"
	tex check_ctraffic
}
check_ctraffic() {
	if ps www | grep -v grep | grep -F 'ctraffic '; then
		tlog "Ctraffic still running..."
		return 1
	fi
	return 0
}
cmd_tcase_ctraffic_kill() {
	tcase "Kill ctraffic"
	killall ctraffic
	return 0
}
cmd_tcase_ctraffic_check() {
	tcase "Check ctraffic output [$1]"
	local local out=$1 val
	val=$(cat $out | jq .FailedConnections)
	tlog "FailedConnections=$val"
	test "$__no_fail" != "yes" -a $val -gt 0 && tdie "FailedConnections"
	val=$(cat $out | jq .FailedConnects)
	tlog "FailedConnects=$val"
	test "$__no_fail" != "yes" -a $val -gt 0 && tdie "FailedConnects"
	val=$(cat $out | jq .Received)
	tlog "Received=$val"
	ctraffic -analyze hosts -stat_file $out 1>&2
	return 0
}
cmd_tcase_kill_pod() {
	test -n "$__app" || __app=app=mserver-deployment
	local pod=$($kubectl get pods -l $__app -o name | head -1)
	tcase "Kill [$pod]"
	$kubectl delete $pod --grace-period=0 || tdie "$kubectl delete"
}
##   neg_source_ranges_access <adr>
##     Negative test with loadBalancerSourceRanges
cmd_tcase_neg_source_ranges_access() {
	tcase "Negative test with loadBalancerSourceRanges ($1)"
	test -n "$1" || tdie "Parameter missing"
	mconnect -address $1:5001 -srccidr 10.200.200.1/32 && tdie IPv4
	mconnect -address [$PREFIX:$1]:5001 -srccidr 10.200.200.1/32 && tdie IPv6
	return 0
}
external_traffic() {
	tlog "Traffic to; $1"
	tex do_mconnect $1 || tdie "mconnect to; $1"
}

cmd_tcase_external_http() {
	tcase "External http traffic"
	if ipv6base; then
		kahttp_to http://[1000::80]
	else
		kahttp_to http://10.0.0.80
	fi
}
kahttp_to() {
	tlog "Traffic to; $1"
	mkdir -p $tmp
	curl -s --http1.1 -D - $1 > $tmp/out || tdie "$1"
	grep -q "200 OK" $tmp/out || tdie "Not OK"
	local adr
	for adr in $(global_ips eth1); do
		grep -F 'RemoteAddr:' $tmp/out
		grep -F 'RemoteAddr:' $tmp/out | grep -q $adr && return 0
	done
	tdie "Src not preserved; $(grep -F 'RemoteAddr:' $tmp/out)"
}

global_ips() {
	ip -json addr show dev $1 | \
		jq -r '.[]|select(.addr_info)|.addr_info[]|select(.scope == "global")|.local'
}

cmd_tcase_metrics_server() {
	tcase "Metrics-server and kubectl top"
	kubectl="kubectl -n kube-system"
	test_deployment metrics-server
	kubectl=kubectl
	pushv 120
	tex metrics_server_status || tdie metrics_server_status
	tex metrics_server_top || tdie metrics_server_top
	popv
	return 0
}
metrics_server_status() {
	kubectl get apiservice v1beta1.metrics.k8s.io -o json | \
		jq -r .status.conditions[].status 2>&1 | grep True
}
metrics_server_top() {
	kubectl top nodes 2>&1 | ogrep error && return 1
	return 0
}

cmd_tcase_kube_proxy_sync() {
	tcase "Check kube-proxy sync"
	mkdir -p $tmp
	local out=/tmp/kube-proxy.log
	local log=/var/log/kube-proxy.log
	tex "test -r $log" || tdie
	pushv 40					# (assuming sync interval 30s)
	tex "tail $log | grep -B1 'sync-runner: ran, next possible' > $out" || tdie
	local last=$(head -1 $out | cut -d' ' -f2 | cut -d. -f1)
	last=$(date -u -d $last +%s)
	local now=$(date +%s)
	local period=$(grep -o 'periodic in.*' $out)
	tlog "Last sync $((now-last))s ago, $period"
	tlog "Wait for next sync..."
	tail -0 -f $log > $out &
	tex "grep 'sync-runner: ran, next possible' $out" || tdie
	tlog "Got sync"
	cat $out
	grep -i error $out && tdie "Found errors"
	grep -i warn $out && tdie "Found warnings"
	return 0
}

cmd_tcase_kube_proxy_restart() {
	tcase "Kube-proxy re-configure/restart"
	local cfg=/etc/kubernetes/kube-proxy.config
	local period=15s
	sed -i -e "s,syncPeriod: 30s,syncPeriod: $period," $cfg
	rm -f /var/log/kube-proxy.log
	killall kube-proxy
}

cmd_tcase_add_srccidr() {
	tcase "Add ($PREFIX:)10.200.0.0/16 to dev lo"
	ip addr replace 10.200.0.0/16 dev lo || tdie
	ip -6 addr replace $PREFIX:10.200.0.0/112 dev lo || tdie
	ip -6 ro replace local $PREFIX:10.200.0.0/112 dev lo
	sysctl -w net.ipv4.ip_nonlocal_bind=1
	sysctl -w net.ipv6.ip_nonlocal_bind=1
	# Create address files
	local i=0 out=/tmp/addresses
	while test $i -lt 255; do
		echo "10.200.200.$i:7000" >> $out-4-fixport
		echo "[$PREFIX:10.200.200.$i]:7000" >> $out-6-fixport
		echo "10.200.200.$i:$((i + 4000))" >> $out-4-port
		echo "[$PREFIX:10.200.200.$i]:$((i + 6000))" >> $out-6-port
		echo "10.200.200.$i" >> $out-4
		echo "[$PREFIX:10.200.200.$i]" >> $out-6
		i=$((i + 1))
	done
}
##   tcase_affinity [--multiport] [--count=] <adr>
##     Test session affinity. With --multiport test is made that ports
##     in a multiport service has affinity (only works with ipvs)
cmd_tcase_affinity() {
	local adr=$1 srccidr
	test -n "$__count" || __count=50
	tcase "Test Service session affinity [$adr] ($__count)"
	test -n "$1" || tdie "Parameter missing "

	# Verify that we have distribution with different sources
	# Also wait until the service become available
	if echo $adr | grep -q :; then
		adr="[$adr]"
		mcopts="-srccidr $PREFIX:10.200.200.0/120"
	else
		mcopts="-srccidr 10.200.200.0/24"
	fi
	tex do_mconnect $adr
	unset mcopts

	if echo $adr | grep -q :; then
		srccidr='$PREFIX:10.200.200.$n/128'
	else
		srccidr='10.200.200.$n/32'
	fi
	local n src srv1 srv2
	for n in $(seq 1 10); do
		eval "src=$srccidr"
		srv1=$(affinity_mconnect $adr:5001 $src) || tdie
		if test "$__multiport" = "yes"; then
			srv2=$(affinity_ctraffic $adr:5003 $src) || tdie
			tlog "Responses from $srv1 and $srv2"
			test "$srv1" = "$srv2" || tdie "Servers differs $srv1 and $srv2"
		fi
	done
}
# Make some connects and verify that they all end up in the same server
affinity_mconnect() {
	local adr=$1
	local srccidr=$2
	mkdir -p $tmp
	local out=$tmp/out
	# Some CNI-plugins (calico) seem to have problems with massive
	# connects to the same POD, especially over IPv6. So changed 100->50.
	mconnect -address $adr -nconn $__count -output json -srccidr $srccidr > $out
	local v
	v=$(cat $out | jq -r .failed_connects)
	test "$v" -eq 0 || tdie "failed_connects $v"
	v=$(cat $out | jq -r '.hosts|keys[]' | wc -w)
	test "$v" -eq 1 || tdie "Multiple servers $v"
	local target=$(cat $out | jq -r '.hosts|keys[]')
	v=$(cat $out | jq -r ".hosts.\"$target\"")
	test $v -eq $__count || tdie "Not all connects $v"
	echo $target
}
affinity_ctraffic() {
	mkdir -p $tmp
	local out=$tmp/out
	local src=$(echo $2 | cut -d/ -f1)
	echo "::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::"\
		| nc -s $src $1 > $out || tdie
	cut -d: -f1 < $out
}

##   tcase_scale <deployment> <n>
##     Scale out/in the tserver deployment
cmd_tcase_scale() {
	tcase "Scale [$1] to [$2]"
	test -n "$2" || tdie "Parameter missing"
	$kubectl scale deployment --replicas=$2 $1 || tdie scale
	test_deployment $1 30
}
##   tcase_check_setcap
##     Test get/setcap in a container
cmd_tcase_check_setcap() {
	local pod=$(get_pod app=alpine-test)
	tcase "Test get/setcap in [$pod]"
	$kubectl exec $pod -- id | ogrep "uid=1000" || tdie "Should be non-root"
	$kubectl exec $pod -- getcap /sbin/ip | ogrep 'cap_net_admin=eip' \
		|| tdie "getcap"
	$kubectl exec $pod -- ip addr add 10.10.10.10/32 dev lo || tdie "ip addr"
}
##   tcase_negative_access <adr> - Check that telnet to the address NOT work
cmd_tcase_negative_access() {
	tcase "Test ssh access NOT works to [$1]"
	test -n "$1" || tdie "Parameter Missing"
	echo "" | nc -w1 $1 22 > /dev/null && tdie "Access works to [$1]"
	return 0
}
##   tcase_mount_hugep
##     Mount the hugepages fs
cmd_tcase_mount_hugep() {
	tcase "Mount the hugepages fs"
	local d=/dev/hugepages
	mkdir -p $d
    mount -t hugetlbfs nodev $d || tdie
}
##   ctraffic_udp
##     Ctraffic over UDP
cmd_tcase_ctraffic_udp() {
	tcase "Ctraffic over UDP"
	local nodeport=$($kubectl get svc udp-svc-mserver -o json | jq '.spec.ports[]|select(.name == "ctraffic").nodePort')
	echo "$nodeport" | grep -E '^[0-9]+$' || tdie "Invalid nodeport [$nodeport]"
	#mkdir -p $tmp
	if ! ctraffic -udp -monitor -stats all -address 192.168.1.2:$nodeport $@ > /tmp/out; then
		cat /tmp/out | jq 1>&2
	fi
	ctraffic -analyze hosts -stat_file /tmp/out 1>&2
}
##   tcase_conntrack_size [size]
##     Set the conntrack size
cmd_tcase_conntrack_size() {
	local s=20000
	test -n "$1" && s=$1
	tcase "Set conntrack size to $s"
	echo $s > /proc/sys/net/nf_conntrack_max
}
##   tcase_svc <svc> [vip]
##     Create a service and set the loadBalancerIP's (optional)
cmd_tcase_svc() {
	tcase "Create service [$1] ($2)"
	test -n "$1" || tdie "No service"
	local svc=$1
	local f=$yamld/svc-$svc.yaml
	test -r $f || f=$yamld/$svc.yaml
	test -r $f || tdie "Can't find manifest"
	$kubectl apply -f $f || tdie "kubectl apply"
	if test -n "$2"; then
		assign-lb-ip -svc $svc -ip $2,$PREFIX:$2 || tdie assign-lb-ip
	fi
}
##   tcase_deployment [--replicas=] <deployment>
##     Start a deployment
cmd_tcase_deployment() {
	tcase "Start deployment [$1] ($__replicas)"
	test -n "$1" || tdie "No deployment"
	local f=$yamld/$1.yaml
	test -r $f || tdie "Can't find manifest"
	test -n "$__replicas" && \
		sed -i -E "s,replicas: [0-9]+,replicas: $__replicas," $f
	$kubectl apply -f $f || tdie "kubectl apply"
	test_deployment $1 120
}
##   tcase_daemonset <daemonset>
##     Start a daemonset
cmd_tcase_daemonset() {
	tcase "Start daemonset [$1]"
	test -n "$1" || tdie "No daemonset"
	local f=$yamld/$1.yaml
	test -r $f || tdie "Can't find manifest"
	$kubectl apply -f $f || tdie "kubectl apply"
	test_daemonset $1 120
}



. /etc/profile
test -n "$PREFIX" || PREFIX=fd00:
. /usr/lib/xctest
indent='  '

##
# Get the command
cmd=$1
shift
grep -q "^cmd_$cmd()" $0 || die "Invalid command [$cmd]"

while echo "$1" | grep -q '^--'; do
	if echo $1 | grep -q =; then
		o=$(echo "$1" | cut -d= -f1 | sed -e 's,-,_,g')
		v=$(echo "$1" | cut -d= -f2-)
		eval "$o=\"$v\""
	else
		o=$(echo "$1" | sed -e 's,-,_,g')
		eval "$o=yes"
	fi
	shift
done
unset o v
long_opts=`set | grep '^__' | cut -d= -f1`

# Execute command
trap "die Interrupted" INT TERM
cmd_$cmd "$@"
status=$?
rm -rf $tmp
exit $status
